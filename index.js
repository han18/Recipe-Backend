// this is the real version of the openAi code
// // Import dependencies
const express = require("express");
const cors = require("cors");
const { OpenAI } = require("openai");
require("dotenv").config();

const app = express();
const PORT = 5000;

// Middleware
app.use(express.json());
app.use(cors());

// this is to initialize openai 
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// this is the route 
app.post("/generate-recipes", async (req, res) => {
  const { ingredients } = req.body;

  if (!ingredients || ingredients.trim() === "") {
    console.error("No ingredients provided");
    return res.status(400).json({ error: "Ingredients are required" });
  }

  try {
    // these what I i'm telling AI to generate or construct the recipe prompt
    const recipePrompt = `Create a detailed and complete recipe using the following ingredients: ${ingredients}.
    
Please include the title, ingredients list, preparation steps, cooking instructions, and any additional tips or variations.`;

    console.log("Recipe Prompt:", recipePrompt);

    // Step 1: Generate the recipe using ChatGPT
    const recipeResponse = await openai.chat.completions.create({
      model: "gpt-4", // GPT-4 with default 8k token limit
      messages: [
        { role: "system", content: "You are an expert recipe generator." },
        { role: "user", content: recipePrompt },
      ],
      max_tokens: 3500, // for the response I only need a maximum token 
      temperature: 0.7, // I adjust this for creativity
    });

    if (!recipeResponse.choices || recipeResponse.choices.length === 0) {
      throw new Error("No recipe generated by OpenAI");
    }

    const generatedRecipe = recipeResponse.choices[0].message.content;
    console.log("Generated Recipe:", generatedRecipe);

    // this is generating images using DALL-E 
    const imagePrompt = `A professional high-quality photo of a delicious dish made with these ingredients: ${ingredients}. 
    The dish should be beautifully plated on a clean, elegant background with professional lighting. 
    The photo should look vibrant, appetizing, and suitable for a fine-dining restaurant menu. Make it look small`;
    
    const imageResponse = await openai.images.generate({
      prompt: imagePrompt,
      n: 1, // Generate 3 variations for better selection
      size: "1024x1024", // High-quality resolution
    });
    
    if (!imageResponse.data || imageResponse.data.length === 0) {
      throw new Error("No image generated by OpenAI/Dall-E");
    }
    
    // Select the first image (or any preferred logic to pick the best)
    const imageUrl = imageResponse.data[0].url;
    console.log("Generated Image URL:", imageUrl);
    

    // Format the response
    const recipes = [
      {
        id: 1,
        title: "Generated Recipe",
        instructions: generatedRecipe,
        image: imageUrl,
      },
    ];

    res.json({ recipes }); // Send recipes as an array
  } catch (error) {
    console.error("OpenAI API Error:", error.message);
    res
      .status(500)
      .json({ error: "Failed to generate recipes or images. Please try again later." });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Backend Server is running on http://localhost:${PORT}`);
});




// this code is the mock version so I can test without hitting the limit 

// const express = require('express');
// const axios = require('axios');
// const nock = require('nock'); // Import Nock for mocking API requests

// const app = express();
// const PORT = 3001;

// app.use(express.json());

// // Check if it's a local environment or production
// const isLocalEnv = process.env.NODE_ENV === 'development';

// // If in local environment, mock OpenAI API responses
// if (isLocalEnv) {
//   nock('https://api.openai.com') // Target OpenAI API URL
//     .post('/v1/completions')
//     .reply(200, {
//       choices: [{
//         text: 'Mocked recipe response with ingredient: chicken, rice, and broccoli.'
//       }]
//     });
// }

// // Endpoint to interact with OpenAI API
// app.post('/generateRecipe', async (req, res) => {
//   const { ingredients } = req.body;

//   if (isLocalEnv) {
//     // Mocked response in development mode
//     return res.json({
//       recipe: 'Mocked recipe response for ingredients: ' + ingredients.join(', ')
//     });
//   }

//   app.post('/generateRecipe', async (req, res) => {
//       const { ingredients } = req.body;
//       console.log('Received ingredients:', ingredients);  // Log incoming data
    
//       try {
//         const response = await axios.post(
//           'https://api.openai.com/v1/completions',
//           {
//             model: 'text-davinci-003',  // Example OpenAI model
//             prompt: `Create a recipe using these ingredients: ${ingredients.join(', ')}`,
//             max_tokens: 200
//           },
//           {
//             headers: {
//               'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
//             }
//           }
//         );
//         console.log('Received OpenAI response:', response.data);  // Log OpenAI response
//         res.json(response.data);
//       } catch (error) {
//         console.error('Error during OpenAI API call:', error.message);  // Log the error message
//         console.error('Error details:', error.response ? error.response.data : error);  // Log full error details
//         res.status(500).send('Error generating recipe');
//       }
//     });

// app.listen(PORT, () => {
//   console.log(`Server is running on http://localhost:${PORT}`);
// });


