// this is the real version of the openAi code
// // Import dependencies

const express = require("express");
const cors = require("cors"); // to allow cross sharing from different domains
const { OpenAI } = require("openai"); // to interact with openai
require("dotenv").config(); // to get the environment variables

const app = express();
const PORT = 5000;

// Middleware
app.use(express.json());
app.use(cors());

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// API Route
app.post("/generate-recipes", async (req, res) => {
  const { ingredients } = req.body;

  if (!ingredients || ingredients.trim() === "") {
    console.error("No ingredients provided");
    return res.status(400).json({ error: "Ingredients are required" });
  }

  try {
    // **STEP 1: Generate the Recipe**
    const recipePrompt = `Create a detailed and complete recipe using the following ingredients: ${ingredients}.
    
Please include the title, ingredients list, preparation steps, cooking instructions, and any additional tips or variations.`;

    console.log("Recipe Prompt:", recipePrompt);

    const recipeResponse = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: "You are an expert recipe generator." },
        { role: "user", content: recipePrompt },
      ],
      max_tokens: 1300,
      temperature: 0.3,
    });

    if (!recipeResponse.choices || recipeResponse.choices.length === 0) {
      throw new Error("No recipe generated by OpenAI");
    }

    const generatedRecipe = recipeResponse.choices[0].message.content;
    console.log("Generated Recipe:", generatedRecipe);

    // **STEP 2: Generate a Dish Description Before Image**
    const dishDescriptionPrompt = `Describe a visually stunning gourmet dish created using these ingredients: ${ingredients}.
The description should be detailed and include plating style, textures, colors, and presentation aesthetics.
Make it sound elegant, as if featured in a Michelin-starred restaurant menu.`;

    const dishResponse = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: "You are an expert food stylist and chef." },
        { role: "user", content: dishDescriptionPrompt },
      ],
      max_tokens: 200,
      temperature: 0.5,
    });

    const dishDescription = dishResponse.choices[0].message.content;
    console.log("Generated Dish Description:", dishDescription);

    // **STEP 3: Use the Dish Description for Image Prompt**
    const imagePrompt = `A high-end food photography image of a gourmet dish: ${dishDescription}.
The dish is plated on a modern ceramic plate, with vibrant textures and elegant styling. 
The background features soft, natural lighting with blurred elements such as fresh ingredients, spices, or fine dining tableware.
The dish should look like it belongs in a Michelin-starred restaurant, with an artistic composition that highlights its richness.
Ensure photorealistic details, making it visually appealing for a food magazine cover.`;

    // Generate Image Using DALL-E
    const imageResponse = await openai.images.generate({
      model: "dall-e-3",
      prompt: imagePrompt,
      n: 1,
      size: "1024x1024",
    });

    if (!imageResponse.data || imageResponse.data.length === 0) {
      throw new Error("No image generated by OpenAI/Dall-E");
    }

    const imageUrl = imageResponse.data[0].url;
    console.log("Generated Image URL:", imageUrl);

    // Format and Send Response
    const recipes = [
      {
        id: 1,
        title: "Generated Recipe",
        instructions: generatedRecipe,
        image: imageUrl,
      },
    ];

    res.json({ recipes });
  } catch (error) {
    console.error("OpenAI API Error:", error.message);
    res.status(500).json({ error: "Failed to generate recipes or images. Please try again later." });
  }
});

// Start Server
app.listen(PORT, () => {
  console.log(`Backend Server is running on http://localhost:${PORT}`);
});


// this is the previous code before doing changes to the image quality of Dall-e
// const express = require("express");
// const cors = require("cors"); // to allow cross sharing from different domains
// const { OpenAI } = require("openai"); // to interact with openai
// require("dotenv").config(); // to get the environment variables

// const app = express();
// const PORT = 5000;

// // for middleware
// app.use(express.json()); // to convert the data into json
// app.use(cors());

// // this is to initialize openai
// const openai = new OpenAI({
//   apiKey: process.env.OPENAI_API_KEY,
// });

// // this is the route
// app.post("/generate-recipes", async (req, res) => {
//   const { ingredients } = req.body;

//   // this is the input validation
//   if (!ingredients || ingredients.trim() === "") {
//     console.error("No ingredients provided");
//     return res.status(400).json({ error: "Ingredients are required" });
//   }

//   try {
//     // this is what i'm telling AI to generate or construct the recipe prompt
//     const recipePrompt = `Create a detailed and complete recipe using the following ingredients: ${ingredients}.

// Please include the title, ingredients list, preparation steps, cooking instructions, and any additional tips or variations.`;

//     // to check the recipe output in the log
//     console.log("Recipe Prompt:", recipePrompt);

//     // generating the recipe using chat this is the prompt and API
//     const recipeResponse = await openai.chat.completions.create({
//       model: "gpt-4", // gpt-4 with default 8k token limit
//       messages: [
//         { role: "system", content: "You are an expert recipe generator." },
//         { role: "user", content: recipePrompt },
//       ],
//       max_tokens: 3500, // for the response i only need a maximum token to control cost
//       temperature: 0.7, // i adjust the randomness for better creativity
//     });

//     // handles missing ai response
//     if (!recipeResponse.choices || recipeResponse.choices.length === 0) {
//       throw new Error("No recipe generated by OpenAI");
//     }

//       // this will extract the recipe from AI and response and logs
//     const generatedRecipe = recipeResponse.choices[0].message.content;
//     console.log("Generated Image:", generatedRecipe);

//     // this is generating images using DALL-E
//     const imagePrompt = `A professional high-quality photo of a delicious dish made with these ingredients: ${ingredients}.
//     The dish should be beautifully plated on a clean, elegant background with professional lighting.
//     The photo should look vibrant, appetizing, and suitable for a fine-dining restaurant menu. Make it look small`;

//     // to get the image response
//     const imageResponse = await openai.images.generate({
//       prompt: imagePrompt,
//       n: 1, // generate 3 variations for better selection
//       size: "1024x1024", // for high quality resolution
//     });
//     // validating the response
//     if (!imageResponse.data || imageResponse.data.length === 0) {
//       throw new Error("No image generated by OpenAI/Dall-E");
//     }

//     // extracting the image and logging it
//     // this is to select the first image (or any preferred logic to pick the best)
//     const imageUrl = imageResponse.data[0].url;
//     console.log("Generated Image URL:", imageUrl);

//     // formatting and sending the final response to the frontend
//     const recipes = [
//       {
//         id: 1,
//         title: "Generated Image",
//         instructions: generatedRecipe,
//         image: imageUrl,
//       },
//     ];

//     res.json({ recipes }); // sending recipes as an array
//   } catch (error) {
//     console.error("OpenAI API Error:", error.message);
//     res
//       .status(500)
//       .json({ error: "Failed to generate recipes or images. Please try again later." });
//   }
// });

// // starting the server
// app.listen(PORT, () => {
//   console.log(`Backend Server is running on http://localhost:${PORT}`);
// });

// this code is the mock version so I can test without hitting the limit

// const express = require('express');
// const axios = require('axios');
// const nock = require('nock'); // Import Nock for mocking API requests

// const app = express();
// const PORT = 3001;

// app.use(express.json());

// // Check if it's a local environment or production
// const isLocalEnv = process.env.NODE_ENV === 'development';

// // If in local environment, mock OpenAI API responses
// if (isLocalEnv) {
//   nock('https://api.openai.com') // Target OpenAI API URL
//     .post('/v1/completions')
//     .reply(200, {
//       choices: [{
//         text: 'Mocked recipe response with ingredient: chicken, rice, and broccoli.'
//       }]
//     });
// }

// // Endpoint to interact with OpenAI API
// app.post('/generateRecipe', async (req, res) => {
//   const { ingredients } = req.body;

//   if (isLocalEnv) {
//     // Mocked response in development mode
//     return res.json({
//       recipe: 'Mocked recipe response for ingredients: ' + ingredients.join(', ')
//     });
//   }

//   app.post('/generateRecipe', async (req, res) => {
//       const { ingredients } = req.body;
//       console.log('Received ingredients:', ingredients);  // Log incoming data

//       try {
//         const response = await axios.post(
//           'https://api.openai.com/v1/completions',
//           {
//             model: 'text-davinci-003',  // Example OpenAI model
//             prompt: `Create a recipe using these ingredients: ${ingredients.join(', ')}`,
//             max_tokens: 200
//           },
//           {
//             headers: {
//               'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
//             }
//           }
//         );
//         console.log('Received OpenAI response:', response.data);  // Log OpenAI response
//         res.json(response.data);
//       } catch (error) {
//         console.error('Error during OpenAI API call:', error.message);  // Log the error message
//         console.error('Error details:', error.response ? error.response.data : error);  // Log full error details
//         res.status(500).send('Error generating recipe');
//       }
//     });

// app.listen(PORT, () => {
//   console.log(`Server is running on http://localhost:${PORT}`);
// });
